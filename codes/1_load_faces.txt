import numpy as np
import os
from scipy.misc import imread, imresize
import matplotlib.pyplot as plt
%matplotlib inline  
import tensorflow as tf
print ("PACKAGES LOADED")

# CURRENT FOLDER
cwd = os.getcwd() 
# RELATIVE PATHS OF FOLDERS CONSTAINING IMAGES
"""
paths = { "../img_dataset/celebs/Arnold_Schwarzenegger"
        , "../img_dataset/celebs/Junichiro_Koizumi"
        , "../img_dataset/celebs/Vladimir_Putin"
        , "../img_dataset/celebs/George_W_Bush"}
"""
# (0=Angry, 1=Disgust, 2=Fear, 3=Happy, 4=Sad, 5=Surprise, 6=Neutral)
paths = { "../img_dataset/face_emotion/0"
        , "../img_dataset/face_emotion/1"
        , "../img_dataset/face_emotion/2"
        , "../img_dataset/face_emotion/3"
        , "../img_dataset/face_emotion/4"
        , "../img_dataset/face_emotion/5"
        , "../img_dataset/face_emotion/6"
        }

imgsize    = [48, 48, 1];
nclass     = len(paths)
valid_exts = [".jpg",".gif",".png",".tga", ".jpeg"]
imgcnt     = 0 
rawimg     = []
rszimg     = []
for i, relpath in zip(range(nclass), paths):
    path = cwd + "/" + relpath
    flist = os.listdir(path)
    temp = 0
    print ("%d-class can have upto %d images" % (i, len(flist)))
    for f in flist:
        if os.path.splitext(f)[1].lower() not in valid_exts:
            continue
        fullpath   = os.path.join(path, f)
        currimg    = imread(fullpath)
        imgsmall   = imresize(currimg, [imgsize[0], imgsize[1]])/255.
        imgvec     = np.reshape(imgsmall, (1, -1))
        curr_label = np.eye(nclass, nclass)[i:i+1, :]
        if imgcnt is 0:
            totalimg   = imgvec
            totallabel = curr_label
        else:
            totalimg   = np.concatenate((totalimg, imgvec), axis=0)
            totallabel = np.concatenate((totallabel, curr_label), axis=0)
        rawimg.append(currimg)
        rszimg.append(imgsmall)        
        imgcnt = imgcnt + 1
        temp = temp + 1
        if temp > 1000:
            break
    print ("%d-class has %d images" % (i, temp))
print ("TOTAL %d IMAGES LOADED." % (imgcnt))

for i in np.random.randint(imgcnt, size=5):
    plt.subplot(1, 2, 1)
    plt.imshow(rawimg[i], cmap='gray')
    plt.title("ORIGINAL IMAGE")
    plt.subplot(1, 2, 2)
    plt.imshow(rszimg[i], cmap='gray')
    plt.title("RESIZED IMAGE")
    plt.show()

randidx    = np.random.randint(imgcnt, size=imgcnt)
trainidx   = randidx[0:int(4*imgcnt/5)]
testidx    = randidx[int(4*imgcnt/5):imgcnt]
trainimg   = totalimg[trainidx, :]
trainlabel = totallabel[trainidx, :]
testimg    = totalimg[testidx, :]
testlabel  = totallabel[testidx, :]

print("%d TRAIN AND %d TEST IMAGES" % (len(trainidx), len(testidx)))
print("EACH IAMGE IS (%d, %d, ) = %d-DIMENSINOAL VECTOR" 
      % (imgsize[0], imgsize[1], trainimg.shape[1]))

savepath = cwd + "/data.npz"
np.savez(savepath, trainimg=trainimg, trainlabel=trainlabel
         , testimg=testimg, testlabel=testlabel, imgsize=imgsize)
print ("DATA SAVED TO %s" % (savepath))

randidx = np.random.randint(imgcnt, size = 30)
for i in randidx: 
    currlabel = np.argmax(totallabel[i, :]) 
    if imgsize[2] == 1:
        currimg = np.reshape(totalimg[i, :], (imgsize[0], imgsize[1]))
        plt.imshow(currimg, cmap='gray')
    else:
        currimg = np.reshape(totalimg[i, :], (imgsize[0], imgsize[1], -1))
        plt.imshow(currimg)
    title_string = "[%d] %d-class" % (i, currlabel)
    plt.title(title_string) 
    plt.show() 

